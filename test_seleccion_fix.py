#!/usr/bin/env python3
"""
Test definitivo para verificar si se solucion√≥ el problema de selecci√≥n
"""

import requests
import time

BASE_URL = "http://localhost:5000"

def verificar_servidor():
    """Verificar que el servidor est√© funcionando"""
    try:
        response = requests.get(f"{BASE_URL}/health", timeout=3)
        if response.status_code == 200:
            print("‚úÖ Servidor funcionando")
            return True
        else:
            print(f"‚ùå Servidor responde con error: {response.status_code}")
            return False
    except:
        print("‚ùå No se puede conectar al servidor")
        print("   Ejecuta: python start.py")
        return False

def obtener_leads():
    """Obtener leads del servidor"""
    try:
        response = requests.get(f"{BASE_URL}/api/calls/leads", timeout=5)
        if response.status_code == 200:
            data = response.json()
            leads = data.get('leads', [])
            print(f"‚úÖ Obtenidos {len(leads)} leads del servidor")
            return leads
        else:
            print(f"‚ùå Error obteniendo leads: {response.status_code}")
            return []
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return []

def probar_seleccion(lead_ids):
    """Probar la selecci√≥n de leads"""
    if not lead_ids:
        print("‚ùå No hay leads para probar")
        return False
        
    try:
        # Seleccionar algunos leads
        response = requests.post(
            f"{BASE_URL}/api/calls/leads/select",
            json={"lead_ids": lead_ids[:3], "selected": True},
            timeout=5
        )
        
        if response.status_code == 200:
            print("‚úÖ API de selecci√≥n funciona correctamente")
            return True
        else:
            print(f"‚ùå Error en selecci√≥n: {response.status_code}")
            print(f"   Respuesta: {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå Error probando selecci√≥n: {e}")
        return False

def main():
    print("üß™ PRUEBA DEFINITIVA - PROBLEMA DE SELECCI√ìN")
    print("=" * 50)
    
    # 1. Verificar servidor
    if not verificar_servidor():
        return
    
    # 2. Obtener leads
    leads = obtener_leads()
    if not leads:
        print("‚ö†Ô∏è No hay leads en la base de datos")
        print("   Necesitas cargar algunos leads primero")
        return
    
    # 3. Probar selecci√≥n
    lead_ids = [lead['id'] for lead in leads]
    if probar_seleccion(lead_ids):
        print("\nüéâ BACKEND FUNCIONA CORRECTAMENTE!")
    else:
        print("\n‚ùå Problema en el backend")
        return
    
    # 4. Instrucciones para UI
    print("\n" + "="*50)
    print("üìã INSTRUCCIONES PARA PROBAR LA UI:")
    print("="*50)
    print("1. Abre: http://localhost:5000/calls-manager")
    print("2. Abre DevTools (F12) y ve a la pesta√±a Console")
    print("3. Haz clic en 'Seleccionar Todo'")
    print("4. Observa la consola - deber√≠as ver logs como:")
    print("   üî• [DEBUG] selectAllLeads iniciado - selected=true")
    print("   üî• [DEBUG] Leads filtrados: X")
    print("   üî• [DEBUG] Leads paginados: X")
    print("5. Si los leads desaparecen, revisa si dice:")
    print("   üî• [DEBUG] ‚ùå NO HAY LEADS FILTRADOS")
    print("\nüí° Si sigue fallando, el problema puede ser:")
    print("   - Filtros autom√°ticos activ√°ndose")
    print("   - Problema en getFilteredLeads()")
    print("   - Estado de leads no actualiz√°ndose correctamente")
    
    print(f"\nüìä DATOS ACTUALES:")
    print(f"   - Total leads disponibles: {len(leads)}")
    print(f"   - Endpoint backend: {BASE_URL}/api/calls/leads/select")
    print(f"   - Estado: ‚úÖ Funcionando")

if __name__ == "__main__":
    main()