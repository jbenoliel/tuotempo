#!/usr/bin/env python3
"""
Script de configuraci√≥n para Railway - Reservas Autom√°ticas
==========================================================

Este script configura y ejecuta el sistema de reservas autom√°ticas en Railway.
Maneja la migraci√≥n de base de datos y el daemon de procesamiento.

Uso en Railway:
- Como servicio separado: python railway_reservas_setup.py
- Como parte del servicio principal: importar y usar las funciones
"""

import os
import sys
import logging
import time
import threading
from datetime import datetime

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    stream=sys.stdout
)
logger = logging.getLogger(__name__)

def verify_environment():
    """
    Verifica que todas las variables de entorno necesarias est√©n configuradas
    """
    logger.info("=== Verificando configuraci√≥n de entorno ===")
    
    required_vars = [
        'MYSQLHOST', 'MYSQLUSER', 'MYSQLPASSWORD', 'MYSQLDATABASE', 'MYSQLPORT',
        'TUOTEMPO_API_BASE_URL', 'TUOTEMPO_API_TOKEN'
    ]
    
    missing_vars = []
    for var in required_vars:
        if not os.getenv(var):
            missing_vars.append(var)
            logger.error(f"‚ùå Variable de entorno faltante: {var}")
        else:
            logger.info(f"‚úÖ Variable configurada: {var}")
    
    if missing_vars:
        logger.critical(f"Faltan variables de entorno cr√≠ticas: {missing_vars}")
        logger.critical("El sistema de reservas autom√°ticas no puede funcionar sin estas variables.")
        return False
    
    logger.info("‚úÖ Todas las variables de entorno est√°n configuradas")
    return True

def run_database_migration():
    """
    Ejecuta la migraci√≥n de base de datos para asegurar que los campos
    de reservas autom√°ticas est√©n disponibles
    """
    logger.info("=== Ejecutando migraci√≥n de base de datos ===")
    
    try:
        # Importar el sistema de migraci√≥n existente
        from db_schema_manager import run_intelligent_migration
        
        logger.info("Iniciando migraci√≥n inteligente basada en schema.sql...")
        
        if run_intelligent_migration():
            logger.info("‚úÖ Migraci√≥n de base de datos completada exitosamente")
            return True
        else:
            logger.error("‚ùå La migraci√≥n de base de datos fall√≥")
            return False
            
    except ImportError as e:
        logger.error(f"‚ùå No se pudo importar el sistema de migraci√≥n: {e}")
        return False
    except Exception as e:
        logger.error(f"‚ùå Error durante la migraci√≥n: {e}")
        return False

def test_database_connection():
    """
    Prueba la conexi√≥n a la base de datos y verifica que los campos
    de reservas autom√°ticas est√©n disponibles
    """
    logger.info("=== Probando conexi√≥n a base de datos ===")
    
    try:
        from db import get_connection
        
        conn = get_connection()
        if not conn:
            logger.error("‚ùå No se pudo conectar a la base de datos")
            return False
        
        cursor = conn.cursor()
        
        # Verificar que la tabla leads tenga los campos necesarios
        cursor.execute("DESCRIBE leads")
        columns = [row[0] for row in cursor.fetchall()]
        
        required_columns = ['reserva_automatica', 'preferencia_horario', 'fecha_minima_reserva']
        missing_columns = [col for col in required_columns if col not in columns]
        
        if missing_columns:
            logger.error(f"‚ùå Faltan columnas en la tabla leads: {missing_columns}")
            logger.error("La migraci√≥n de base de datos no se complet√≥ correctamente")
            return False
        
        logger.info("‚úÖ Todos los campos de reservas autom√°ticas est√°n disponibles")
        
        # Probar una consulta simple
        cursor.execute("SELECT COUNT(*) FROM leads WHERE reserva_automatica = TRUE")
        count = cursor.fetchone()[0]
        logger.info(f"‚úÖ Encontrados {count} leads marcados para reserva autom√°tica")
        
        cursor.close()
        conn.close()
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Error al probar la conexi√≥n a base de datos: {e}")
        return False

def start_reservation_daemon():
    """
    Inicia el daemon de procesamiento de reservas autom√°ticas
    """
    logger.info("=== Iniciando daemon de reservas autom√°ticas ===")
    
    try:
        from procesador_reservas_automaticas import ProcesadorReservasAutomaticas
        
        procesador = ProcesadorReservasAutomaticas()
        
        # Configurar intervalo desde variable de entorno (por defecto 30 minutos)
        interval_minutes = int(os.getenv('RESERVAS_INTERVAL_MINUTES', '30'))
        logger.info(f"Intervalo configurado: {interval_minutes} minutos")
        
        logger.info("üöÄ Daemon de reservas autom√°ticas iniciado")
        
        while True:
            try:
                start_time = datetime.now()
                logger.info(f"--- Iniciando ciclo de procesamiento: {start_time} ---")
                
                procesador.procesar_reservas_automaticas()
                
                end_time = datetime.now()
                duration = (end_time - start_time).total_seconds()
                logger.info(f"--- Ciclo completado en {duration:.2f} segundos ---")
                
                logger.info(f"‚è∞ Esperando {interval_minutes} minutos hasta el pr√≥ximo procesamiento...")
                time.sleep(interval_minutes * 60)
                
            except KeyboardInterrupt:
                logger.info("üõë Deteniendo daemon por interrupci√≥n del usuario")
                break
            except Exception as e:
                logger.error(f"‚ùå Error en el ciclo de procesamiento: {e}")
                logger.info("‚è∞ Esperando 5 minutos antes de reintentar...")
                time.sleep(300)  # Esperar 5 minutos antes de reintentar
                
    except Exception as e:
        logger.error(f"‚ùå Error fatal al iniciar el daemon: {e}")
        sys.exit(1)

def run_single_processing():
    """
    Ejecuta un solo ciclo de procesamiento de reservas autom√°ticas
    (√∫til para testing o ejecuci√≥n manual)
    """
    logger.info("=== Ejecutando procesamiento √∫nico ===")
    
    try:
        from procesador_reservas_automaticas import ProcesadorReservasAutomaticas
        
        procesador = ProcesadorReservasAutomaticas()
        procesador.procesar_reservas_automaticas()
        
        logger.info("‚úÖ Procesamiento √∫nico completado")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Error en el procesamiento √∫nico: {e}")
        return False

def main():
    """
    Funci√≥n principal para Railway
    """
    logger.info("üöÄ Iniciando sistema de reservas autom√°ticas en Railway")
    
    # Verificar configuraci√≥n
    if not verify_environment():
        logger.critical("‚ùå Configuraci√≥n de entorno inv√°lida. Abortando.")
        sys.exit(1)
    
    # Ejecutar migraci√≥n de base de datos
    if not run_database_migration():
        logger.critical("‚ùå Migraci√≥n de base de datos fall√≥. Abortando.")
        sys.exit(1)
    
    # Probar conexi√≥n a base de datos
    if not test_database_connection():
        logger.critical("‚ùå Prueba de base de datos fall√≥. Abortando.")
        sys.exit(1)
    
    # Determinar modo de ejecuci√≥n
    mode = os.getenv('RESERVAS_MODE', 'daemon').lower()
    
    if mode == 'single':
        logger.info("Modo: Procesamiento √∫nico")
        if run_single_processing():
            logger.info("‚úÖ Sistema completado exitosamente")
        else:
            logger.error("‚ùå Procesamiento fall√≥")
            sys.exit(1)
    else:
        logger.info("Modo: Daemon continuo")
        start_reservation_daemon()

if __name__ == "__main__":
    main()
